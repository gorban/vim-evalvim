*evalvim.txt*  Plugin to eval/run vim script.

Author:  Maxim Kim <habamax@gmail.com>
URL:     https://github.com/habamax/vim-evalvim
License: MIT

================================================================================

Why do you need it?

Well, most probably you don't need this plugin. ;)

I find it useful for:

    * making other vim plugins -- write vimscript anywhere, eval/run it, see
      the result;
	* check vimrc settings or plugin settings I do occasionally install.


MAPPINGS                                                    *evalvim-mappings*

To use default mappings set g:evalvim_mappings to true

    let g:evalvim_mappings = 1



<leader>v                                                  *evalvim-<leader>v*
'<leader>v' in normal mode is an operator. It starts |operator-pending-mode|
where you can specify a motion to evaluate with.

'<leader>v' in visual mode evaluates selection.


<leader>vv                                                *evalvim-<leader>vv*
Evaluate current vimscript line.

Put the cursor on the next line:

	let g:my_variable = 100

press '<leader>vv' to evaluate it. As a result you will have 'g:my_variable' created
with '100' assigned. Now evaluate the next line with '<leader>vv':

	echo "g:my_variable is equal to ".g:my_variable

you should see "g:my_variable is equal to 100" at the bottom of your vim
window.


<leader>vap                                              *evalvim-<leader>vap*
Evaluate current vimscript paragraph.

Put the cursor somewhere in the function

	fun! HelloFunc()
		:smile
	endfu

press '<leader>vap' to evaluate it. As a result you will have 'HelloFunc'
created. To call it, either run the command from |Cmdline|, or evaluate with
'<leader>vap':

	:call HelloFunc()

you should see smile generated by vim.

Now go change the function and re-evaluate it. :)

This kind of stuff (function re-evaluation) is more convenient together with
vim function text object provided by:

	https://github.com/kana/vim-textobj-user
	https://github.com/kana/vim-textobj-function

using it you will be able to eval vim functions with '<leader>vaf'.


PLUGS                                                          *evalvim-plugs*
Default mapping is |<leader>v|

One can remap it to something else using following <Plug>s:

	xmap gy  <Plug>(EvalVim)
	nmap gy  <Plug>(EvalVim)
	omap gy  <Plug>(EvalVim)
	nmap gyy <Plug>(EvalVimLine)


SETTINGS                                                    *evalvim-settings*

*g:evalvim_capture_output* (0/1)
	Whether to capture the output of evaluation to '*' register.
	0 - no
	1 - yes

	Default: 1.


*g:evalvim_mappings* (0/1)
	Whether to capture the output of evaluation to '*' register.
	0 - no
	1 - yes

	Default: 0.



vim:tw=78:ts=4:ft=help:
